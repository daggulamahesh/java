import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.CopyObjectRequest;
import software.amazon.awssdk.services.s3.model.DeleteObjectRequest;
import software.amazon.awssdk.services.s3.model.HeadObjectRequest;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;
import software.amazon.awssdk.services.s3.model.S3Object;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.FileInputStream;
import java.nio.file.Paths;
import java.time.Instant;
import java.util.List;

@Service
public class S3Service {

    private S3Client s3Client;

    @Value("${aws.access.key.id}")
    private String accessKeyId;

    @Value("${aws.secret.access.key}")
    private String secretAccessKey;

    @Value("${aws.region}")
    private String region;

    private static final Logger logger = LoggerFactory.getLogger(S3Service.class);

    @PostConstruct
    public void initializeAmazon() {
        AwsBasicCredentials awsCreds = AwsBasicCredentials.create(accessKeyId, secretAccessKey);
        this.s3Client = S3Client.builder()
                .region(Region.of(region))
                .credentialsProvider(StaticCredentialsProvider.create(awsCreds))
                .build();
        logger.info("Initialized S3Client with region: {}", region);
    }

    public void renameSubfolderAndUploadFile(String bucketName, String oldSubfolder, String newSubfolder, String newFileKey, FileInputStream inputStream, long contentLength) {
        if (s3Client == null) {
            logger.error("S3Client is not initialized.");
            return;
        }

        if (bucketName == null || bucketName.isEmpty()) {
            logger.error("Bucket name is null or empty.");
            return;
        }

        if (oldSubfolder == null || oldSubfolder.isEmpty()) {
            logger.error("Old subfolder is null or empty.");
            return;
        }

        if (newSubfolder == null || newSubfolder.isEmpty()) {
            logger.error("New subfolder is null or empty.");
            return;
        }

        logger.info("Bucket Name: {}", bucketName);
        logger.info("Old Subfolder: {}", oldSubfolder);
        logger.info("New Subfolder: {}", newSubfolder);

        String oldFolderPath = oldSubfolder.endsWith("/") ? oldSubfolder : oldSubfolder + "/";
        String newFolderPath = newSubfolder.endsWith("/") ? newSubfolder : newSubfolder + "/";

        // Incremental check for folder existence
        int counter = 1;
        while (doesFolderExist(bucketName, newFolderPath)) {
            newFolderPath = newSubfolder + "(" + counter + ")/";
            counter++;
        }

        // List all objects under the old folder path
        ListObjectsV2Request listRequest = ListObjectsV2Request.builder()
                .bucket(bucketName)
                .prefix(oldFolderPath)
                .build();

        logger.info("List Request: {}", listRequest);

        ListObjectsV2Response listResponse = s3Client.listObjectsV2(listRequest);

        if (listResponse == null) {
            logger.error("List response is null.");
            return;
        }

        List<S3Object> objects = listResponse.contents();
        logger.info("Number of objects to copy: {}", objects.size());

        // Copy each object to the new folder
        for (S3Object s3Object : objects) {
            String oldKey = s3Object.key();
            String newKey = oldKey.replaceFirst(oldFolderPath, newFolderPath);

            logger.info("Copying from {} to {}", oldKey, newKey);

            CopyObjectRequest copyRequest = CopyObjectRequest.builder()
                    .sourceBucket(bucketName)
                    .sourceKey(oldKey)
                    .destinationBucket(bucketName)
                    .destinationKey(newKey)
                    .build();

            s3Client.copyObject(copyRequest);
        }

        // Delete the old objects
        for (S3Object s3Object : objects) {
            String oldKey = s3Object.key();

            logger.info("Deleting old key: {}", oldKey);

            DeleteObjectRequest deleteRequest = DeleteObjectRequest.builder()
                    .bucket(bucketName)
                    .key(oldKey)
                    .build();

            s3Client.deleteObject(deleteRequest);
        }

        // Upload the new file if needed
        if (newFileKey != null && inputStream != null) {
            newFileKey = handleFileNaming(bucketName, newFileKey);

            try {
                PutObjectRequest putRequest = PutObjectRequest.builder()
                        .bucket(bucketName)
                        .key(newFileKey)
                        .contentLength(contentLength)
                        .build();

                s3Client.putObject(putRequest, Paths.get(inputStream.toString()));
                logger.info("File uploaded to: {}", newFileKey);
            } catch (Exception e) {
                logger.error("Error uploading file: {}", e.getMessage(), e);
            } finally {
                try {
                    inputStream.close();
                } catch (Exception e) {
                    logger.error("Error closing input stream: {}", e.getMessage(), e);
                }
            }
        }
    }

    private boolean doesFolderExist(String bucketName, String folderPath) {
        ListObjectsV2Request checkRequest = ListObjectsV2Request.builder()
                .bucket(bucketName)
                .prefix(folderPath)
                .maxKeys(1)
                .build();

        ListObjectsV2Response checkResponse = s3Client.listObjectsV2(checkRequest);
        return !checkResponse.contents().isEmpty();
    }

    private String handleFileNaming(String bucketName, String fileKey) {
        int counter = 1;
        String newFileKey = fileKey;
        String fileName = Paths.get(fileKey).getFileName().toString();
        String fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf('.'));
        String fileExtension = fileName.substring(fileName.lastIndexOf('.'));

        while (doesFileExist(bucketName, newFileKey)) {
            newFileKey = fileKey.replace(fileName, fileNameWithoutExtension + "(" + counter + ")" + fileExtension);
            counter++;
        }
        return newFileKey;
    }

    private boolean doesFileExist(String bucketName, String fileKey) {
        HeadObjectRequest headRequest = HeadObjectRequest.builder()
                .bucket(bucketName)
                .key(fileKey)
                .build();

        try {
            s3Client.headObject(headRequest);
            return true; // If no exception is thrown, the object exists
        } catch (Exception e) {
            return false; // Object does not exist
        }
    }
}
